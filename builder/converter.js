// Generated by CoffeeScript 1.6.3
(function() {
  var Client, HTMLConverter, HTMLText, MarkdownReader, TextConverter, fs, marked,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  marked = require('marked');

  MarkdownReader = (function() {
    function MarkdownReader(builder) {
      this.builder = builder;
    }

    MarkdownReader.prototype.construct = function(structure) {
      var lastListOrdered, links, token, _i, _len;
      links = structure.links;
      lastListOrdered = null;
      for (_i = 0, _len = structure.length; _i < _len; _i++) {
        token = structure[_i];
        if (token === 'links') {
          continue;
        }
        switch (token.type) {
          case 'heading':
            this.builder.convertHeading(token.depth, token.text);
            break;
          case 'html':
            this.builder.convertHTML(token.pre, token.text);
            break;
          case 'list_start':
            lastListOrdered = token.ordered;
            this.builder.convertListStart(token.ordered);
            break;
          case 'list_end':
            this.builder.convertListEnd(lastListOrdered);
            lastListOrdered = null;
            break;
          case 'list_item_start':
            this.builder.convertListItemStart();
            break;
          case 'text':
            this.builder.convertText(token.text);
            break;
          case 'list_item_end':
            this.builder.convertListItemEnd();
            break;
          case 'space':
            this.builder.convertSpace();
            break;
          case 'paragraph':
            this.builder.convertParagraph(token.text);
            break;
          case 'hr':
            this.builder.convertHorizontalRule();
            break;
          case 'code':
            this.builder.convertCode(token.text);
            break;
          case 'blockquote_start':
            this.builder.convertBlockquoteStart();
            break;
          case 'blockquote_end':
            this.builder.convertBlockquoteEnd();
        }
      }
    };

    return MarkdownReader;

  })();

  HTMLText = (function() {
    function HTMLText() {
      this.result = '';
    }

    HTMLText.prototype.append = function(obj) {
      return this.result += obj;
    };

    HTMLText.prototype.get = function() {
      return this.result;
    };

    return HTMLText;

  })();

  TextConverter = (function() {
    function TextConverter() {}

    TextConverter.prototype.buildPart = function() {};

    return TextConverter;

  })();

  HTMLConverter = (function(_super) {
    __extends(HTMLConverter, _super);

    function HTMLConverter() {
      this.product = new HTMLText();
    }

    HTMLConverter.prototype.buildPart = function(obj) {
      return this.product.append(obj);
    };

    HTMLConverter.prototype.escapeHtml = function(unsafe) {
      return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    };

    HTMLConverter.prototype.convertHeading = function(depth, text) {
      return this.product.append("<h" + depth + ">" + text + "</h" + depth + ">");
    };

    HTMLConverter.prototype.convertHTML = function(pre, text) {
      if (pre) {
        return this.product.append("<pre>" + (this.escapeHtml(text)) + "</pre>");
      } else {
        return this.product.append(text);
      }
    };

    HTMLConverter.prototype.convertListStart = function(ordered) {
      if (ordered) {
        return this.product.append("<ol>");
      } else {
        return this.product.append("<ul>");
      }
    };

    HTMLConverter.prototype.convertListEnd = function(ordered) {
      if (ordered) {
        return this.product.append("</ol>");
      } else {
        return this.product.append("</ul>");
      }
    };

    HTMLConverter.prototype.convertListItemStart = function() {
      return this.product.append("<li>");
    };

    HTMLConverter.prototype.convertListItemEnd = function() {
      return this.product.append("</li>");
    };

    HTMLConverter.prototype.convertText = function(text) {
      return this.product.append(text);
    };

    HTMLConverter.prototype.convertSpace = function() {
      return this.product.append("&nbsp;");
    };

    HTMLConverter.prototype.convertParagraph = function(text) {
      return this.product.append("<p>" + text + "</p>");
    };

    HTMLConverter.prototype.convertHorizontalRule = function() {
      return this.product.append("<hr />");
    };

    HTMLConverter.prototype.convertCode = function(text) {
      return this.product.append("<pre><code>" + (this.escapeHtml(text)) + "</code></pre>");
    };

    HTMLConverter.prototype.convertBlockquoteStart = function() {
      return this.product.append("<blockquote>");
    };

    HTMLConverter.prototype.convertBlockquoteEnd = function() {
      return this.product.append("</blockquote>");
    };

    HTMLConverter.prototype.getResult = function() {
      return this.product;
    };

    return HTMLConverter;

  })(TextConverter);

  Client = (function() {
    function Client() {}

    Client.run = function() {
      var filename;
      filename = './markdown.text';
      return fs.readFile(filename, 'utf8', function(err, data) {
        var concreteBuilder, director, result, tokens;
        if (err) {
          throw err;
        }
        concreteBuilder = new HTMLConverter();
        director = new MarkdownReader(concreteBuilder);
        tokens = marked.lexer(data);
        director.construct(tokens);
        result = concreteBuilder.getResult();
        return console.log(result.get());
      });
    };

    return Client;

  })();

  Client.run();

}).call(this);
