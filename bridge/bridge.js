// Generated by CoffeeScript 1.6.3
(function() {
  var AbstractDatastore, Client, Datastore, FileSystemProvider, LocalStorageProvider, Provider, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AbstractDatastore = (function() {
    function AbstractDatastore(provider) {
      this.provider = provider;
    }

    AbstractDatastore.prototype.get = function(key) {};

    AbstractDatastore.prototype.set = function(key, value) {};

    AbstractDatastore.prototype.remove = function(key) {};

    return AbstractDatastore;

  })();

  Datastore = (function(_super) {
    __extends(Datastore, _super);

    function Datastore() {
      _ref = Datastore.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Datastore.prototype.get = function(key) {
      return this.provider.read(key);
    };

    Datastore.prototype.set = function(key, value) {
      return this.provider.update(key, value);
    };

    Datastore.prototype.remove = function(key) {
      return this.provider["delete"](key);
    };

    return Datastore;

  })(AbstractDatastore);

  Provider = (function() {
    function Provider(path) {
      this.path = path;
    }

    Provider.prototype.read = function(key) {
      var data;
      data = this.getData();
      if (key) {
        return data[key];
      } else {
        return data;
      }
    };

    Provider.prototype.update = function(key, value) {
      var data;
      data = this.getData();
      data[key] = value;
      return this.setData(data);
    };

    Provider.prototype["delete"] = function(key) {
      var data;
      data = this.getData();
      delete data[key];
      return this.setData(data);
    };

    return Provider;

  })();

  FileSystemProvider = (function(_super) {
    __extends(FileSystemProvider, _super);

    function FileSystemProvider(path) {
      this.path = path;
      this.fs = require('fs');
    }

    FileSystemProvider.prototype.getData = function() {
      var data, json;
      json = '{}';
      if (this.fs.existsSync(this.path)) {
        json = this.fs.readFileSync(this.path);
      }
      return data = JSON.parse(json);
    };

    FileSystemProvider.prototype.setData = function(data) {
      var json;
      json = JSON.stringify(data, null, '  ');
      return this.fs.writeFileSync(this.path, json);
    };

    return FileSystemProvider;

  })(Provider);

  LocalStorageProvider = (function(_super) {
    __extends(LocalStorageProvider, _super);

    function LocalStorageProvider(path) {
      this.path = path;
    }

    LocalStorageProvider.prototype.getData = function() {
      var data, json;
      json = window.localStorage.getItem(this.path) || '{}';
      return data = JSON.parse(json);
    };

    LocalStorageProvider.prototype.setData = function(data) {
      var json;
      json = JSON.stringify(data, null, '  ');
      return window.localStorage.setItem(this.path, json);
    };

    return LocalStorageProvider;

  })(Provider);

  Client = (function() {
    function Client() {}

    Client.run = function() {
      var Prov, datastore, path;
      Prov = typeof window !== "undefined" && window !== null ? LocalStorageProvider : FileSystemProvider;
      path = './result.json';
      datastore = new Datastore(new Prov(path));
      datastore.set('disapproval', '(ಠ_ಠ)');
      datastore.set('tableflip', '(╯°□°）╯︵ ┻━┻');
      datastore.set('pedobear', 'ʕ•ᴥ•ʔ');
      console.log(datastore.get());
      datastore.remove('disapproval');
      datastore.remove('tableflip');
      datastore.remove('pedobear');
      return console.log(datastore.get());
    };

    return Client;

  })();

  Client.run();

}).call(this);
