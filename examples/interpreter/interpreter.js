// Generated by CoffeeScript 1.6.3
(function() {
  var Client, Template, TemplateBlock, TemplateData, TemplateParser, TemplateText, fs,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  TemplateData = (function() {
    function TemplateData() {
      this.vars = {};
    }

    TemplateData.prototype.set = function(key, val) {
      return this.vars[key] = val;
    };

    TemplateData.prototype.get = function(key) {
      return this.vars[key];
    };

    return TemplateData;

  })();

  Template = (function() {
    function Template() {}

    Template.prototype.interpret = function(context) {
      this.context = context;
    };

    return Template;

  })();

  TemplateBlock = (function(_super) {
    __extends(TemplateBlock, _super);

    function TemplateBlock(key) {
      this.key = key;
    }

    TemplateBlock.prototype.interpret = function(context) {
      this.context = context;
      return this.context.get(this.key);
    };

    return TemplateBlock;

  })(Template);

  TemplateText = (function(_super) {
    __extends(TemplateText, _super);

    function TemplateText(text) {
      this.text = text;
    }

    TemplateText.prototype.interpret = function(context) {
      this.context = context;
      return this.text;
    };

    return TemplateText;

  })(Template);

  TemplateParser = (function(_super) {
    __extends(TemplateParser, _super);

    function TemplateParser(expression) {
      var regex, token, _i, _len, _ref;
      this.stack = [];
      regex = /(\{{2}\w*\}{2})/;
      _ref = expression.split(regex);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        token = _ref[_i];
        if (token.match(regex)) {
          this.stack.push(new TemplateBlock(token.slice(2, -2)));
        } else {
          this.stack.push(new TemplateText(token));
        }
      }
    }

    TemplateParser.prototype.interpret = function(context) {
      var expression, result, _i, _len, _ref;
      this.context = context;
      result = [];
      _ref = this.stack;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        expression = _ref[_i];
        result.push(expression.interpret(this.context));
      }
      return result.join('');
    };

    return TemplateParser;

  })(Template);

  Client = (function() {
    function Client() {}

    Client.run = function() {
      return fs.readFile('../assets/template.html', 'utf8', function(err, expression) {
        var result, sentence, variables;
        if (err) {
          throw err;
        }
        variables = new TemplateData();
        variables.set('title', 'Template Interpreter');
        variables.set('stylesheet', '../assets/styles.css');
        variables.set('content', 'Hello, world!');
        sentence = new TemplateParser(expression);
        result = sentence.interpret(variables);
        return fs.writeFile("./result.html", result, function(err) {
          if (err) {
            throw err;
          }
          return console.log('Wrote result.html!\n');
        });
      });
    };

    return Client;

  })();

  Client.run();

}).call(this);
